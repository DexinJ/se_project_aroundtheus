!function(){"use strict";class e{constructor(e,t,s,n,i,r){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=n,this._owned=e.owner._id===s,this._id=e._id,this._handleCardDelete=i,this._like=e.likes.length,this._handleLike=r,this._likedByOwner=!1,e.likes.forEach((e=>{e._id===s&&(this._likedByOwner=!0)}))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}generateCard(){return this._element=this._getTemplate(),this._deleteButton=this._element.querySelector(".card__delete-button"),this._likeButton=this._element.querySelector(".card__like-button"),this._image=this._element.querySelector(".card__image"),this._likeNumber=this._element.querySelector(".card__like-number"),this._setEventListeners(),this._image.src=this._link,this._image.alt=this._name,this._likeNumber.textContent=this._like,this._likedByOwner&&this._likeButton.classList.add("card__like-button_status_checked"),this._element.querySelector(".card__text").textContent=this._name,this._owned||this._deleteButton.remove(),this._element}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLike(this._id)})),this._owned&&this._deleteButton.addEventListener("click",(()=>{this._handleCardDelete(this._id)})),this._image.addEventListener("click",(()=>{this._handleOpenModal()}))}_handleOpenModal(){this._handleCardClick({name:this._name,link:this._link})}remove(){this._element.remove()}likedByOwner(){return this._likedByOwner}updateLike(e){this._like=e,this._likeNumber.textContent=this._like,this._likeButton.classList.toggle("card__like-button_status_checked"),this._likedByOwner=!this._likedByOwner}}class t{constructor(e,t){let{item:s,renderer:n}=e;this._item=s,this._renderer=n,this._section=document.querySelector(t)}renderItems(){this._section.innerHTML="",this._item.forEach((e=>{this._renderer(e,this._section)}))}addItem(e){this._section.prepend(e)}}class s{constructor(e){this._element=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._element.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._element.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&(console.log("closing"),this.close())}setEventListeners(){this._element.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close(),e.target.classList.contains("modal__close")&&this.close()}))}}class n{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}enableValidation(){this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._setEventListeners()}_setEventListeners(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._inputElement=e,this._checkInputValidity(),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._inputElement=e,this._hideInputError()})),this._toggleButtonState()}_checkInputValidity(){this._inputElement.validity.valid?this._hideInputError():this._showInputError()}_showInputError(){const e=this._formElement.querySelector(`#${this._inputElement.id}-error`);this._inputElement.classList.add(this._inputErrorClass),e.textContent=this._inputElement.validationMessage,e.classList.add(this._errorClass)}_hideInputError(){const e=this._formElement.querySelector(`#${this._inputElement.id}-error`);this._inputElement.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}_hasInvalidInput(){return this._valid=!0,this._inputList.forEach((e=>{e.validity.valid||(this._valid=!1)})),!this._valid}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}}const i={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"},r=document.forms["profile-form"],o=document.forms["add-form"],a=document.forms["profilePic-form"],l=document.querySelector(".profile__button_type_edit"),h=document.querySelector(".profile__button_type_add"),c=r.querySelector("[name = 'name']"),_=r.querySelector("[name = 'about']"),u=new class{constructor(e){this._nameSelector=e.nameSelector,this._jobSelector=e.jobSelector,this._avatarSelector=e.avatarSelector,this._name=document.querySelector(this._nameSelector),this._job=document.querySelector(this._jobSelector),this._avatar=document.querySelector(this._avatarSelector)}getUserInfo(){return{name:this._name.textContent,about:this._job.textContent}}setUserInfo(e){let{name:t,about:s,avatar:n,_id:i}=e;console.log(n),this._name.textContent=t,this._job.textContent=s,this._avatar.src=n,this.userId=i}}({nameSelector:".profile__name",jobSelector:".profile__title",avatarSelector:".profile__image"}),d=new class extends s{constructor(e){super(e),this._image=this._element.querySelector(".modal__image"),this._caption=this._element.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._image.src=s,this._image.alt=t,this._caption.textContent=t,super.open()}}("#pictureModal"),m=new n(i,r),p=new n(i,o),E=new n(i,a),f=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._auth=s.authorization,this._contentType=s.contentType}getUser(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._auth}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInitCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._auth}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editProfile(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._auth,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._auth,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._auth,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}toggleLike(e,t){return t?fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:{authorization:this._auth,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))):fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:{authorization:this._auth,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateProfilePicture(e){let{link:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._auth,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"b11a73f6-210f-4a22-80fa-1200af39d0e9","Content-Type":"application/json"}});class v extends s{constructor(e,t){super(e),this._form=this._element.querySelector(".modal__form"),this._submitFunction=t,this._inputs=this._element.querySelectorAll(".modal__input"),this._button=this._element.querySelector(".modal__button")}_getInputValues(){return this._inputValues={},this._inputs.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._element.addEventListener("submit",(e=>{e.preventDefault(),this._submitFunction(this._getInputValues()),this.close()}))}close(){this._form.reset(),super.close()}setButtonText(e){this._button.textContent=e}}const k=new class extends s{constructor(e){super(e),this._button=this._element.querySelector(".modal__button")}setEventListeners(){super.setEventListeners(),this._button.addEventListener("click",this._setClickActionWrapper)}_setClickActionWrapper=e=>{e.preventDefault(),this._confirmDelete()};setClickAction(e){this._confirmDelete=e}setButtonText(e){this._button.textContent=e}}("#deleteModal"),y=new v("#nameModal",(function(e){y.setButtonText("Saving..."),f.editProfile(e).then((e=>{u.setUserInfo(e)})).catch((e=>{console.error(e)})).finally((()=>{y.setButtonText("Save")}))})),b=new v("#addImageModal",(function(e){b.setButtonText("Saving..."),f.addCard(e).then((e=>{new t({item:{},renderer:()=>{}},".gallery__cards").addItem(g(e))})).catch((e=>{console.error(e)})).finally((()=>{b.setButtonText("Create")}))})),S=new v("#profilePictureModal",(function(e){S.setButtonText("Saving..."),f.updateProfilePicture(e).then((e=>{u.setUserInfo(e)})).catch((e=>{console.error(e)})).finally((()=>{S.setButtonText("Save")}))})),C=new class{constructor(e,t){this._element=document.querySelector(e),this._handleImageEdit=t,console.log(this._element)}setEventListeners(){this._element.addEventListener("click",this._handleImageEdit)}}(".profile__image-container",(()=>{S.open()}));function g(t){const s=new e(t,"#card",u.userId,L,(e=>{!function(e,t){k.open(),k.setClickAction((()=>{k.setButtonText("Saving..."),f.deleteCard(t).then((()=>{e.remove(),k.close()})).catch((e=>{console.error(e)})).finally((()=>{k.setButtonText("Yes")}))})),k.open()}(s,e)}),(e=>{f.toggleLike(e,s.likedByOwner()).then((e=>{s.updateLike(e.likes.length)})).catch((e=>{console.error(e)}))}));return s.generateCard()}function L(e){d.open(e)}l.addEventListener("click",(()=>{!function(){const e=u.getUserInfo();c.value=e.name,_.value=e.about}(),m.resetValidation(),y.open()})),h.addEventListener("click",(()=>{p.resetValidation(),b.open()})),C.setEventListeners(),y.setEventListeners(),b.setEventListeners(),d.setEventListeners(),k.setEventListeners(),S.setEventListeners(),m.enableValidation(),p.enableValidation(),E.enableValidation(),m.resetValidation(),p.resetValidation(),E.resetValidation(),Array.from(document.querySelectorAll(".modal")).forEach((e=>{e.classList.add("modal__transition")})),f.getUser().then((e=>{u.setUserInfo(e)})).catch((e=>{console.error(e)})),f.getInitCards().then((e=>{new t({item:e,renderer:(e,t)=>{t.append(g(e))}},".gallery__cards").renderItems()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,